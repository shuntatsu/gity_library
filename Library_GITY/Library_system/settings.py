"""
Django settings for Library_system project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.environ.get("DEBUG", default=0))

ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS").split(" ")
#カスタムユーザーモデルをデフォルトのユーザーモデルとして指定
AUTH_USER_MODEL = 'library.CustomUser'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # 既存のデフォルトのバックエンド
    'library.backends.OidcBackend',  # 新しいカスタムバックエンド
]

# Application definition

SESSION_COOKIE_AGE = 15 * 60
SESSION_SAVE_EVERY_REQUEST = True

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_crontab',
    'django_keycloak',
    'library',
]
CRONJOBS = [
    ('0 10 * * *', 'library.tasks.send_reminder_emails'),  # 朝10時にリマインダーメールを送信
]
#####################################################################
#####################################################################
KEYCLOAK = {
    'SERVER_URL': 'http://your-keycloak-server/auth/',
    'REALM': 'your-realm',
    'CLIENT_ID': 'your-client-id',
    'CLIENT_SECRET_KEY': 'your-client-secret',
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Library_system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Library_system.wsgi.application'

# レート制限用のキャッシュバックエンドを設定
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    }
}

# レート制限の設定
RATELIMIT_CACHE_BACKEND = 'default'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        "ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.environ.get("SQL_DATABASE", BASE_DIR / "db.sqlite3"),
        "USER": os.environ.get("SQL_USER", "user"),
        "PASSWORD": os.environ.get("SQL_PASSWORD", "password"),
        "HOST": os.environ.get("SQL_HOST", "localhost"),
        "PORT": os.environ.get("SQL_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#--------------------------------------------------------------------------------------------------------------------#
'''
# console.EmailBackendというのを指定すると、メールサーバーの面倒な設定をしなくても、ターミナルにメールの本文を出力してくれる
# メールを送らなくてもメールをテストできるため開発中は便利
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

'''
# ログインが必要なページにログインせずにアクセスしたとき、そのユーザーをどのページに飛ばすかという設定
LOGIN_URL = "/library/user_login/"

# ログインに成功したときにユーザーをどのページに移動させるかという設定
LOGIN_REDIRECT_URL = "/library/login_rp"

# ログアウトしたときにユーザーをどのページに移動させるかという設定
LOGOUT_REDIRECT_URL = "/library/user_login/"

#################################################################################################
'''
# 注意  メール送信者の設定。保管は厳重に
'''

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'otsuru.gity@gmail.com'
EMAIL_HOST_PASSWORD = 'ixzccvkehrswbfto'
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = 'GITY Library <@gmail.com>'

################################################################
# get these values from keycloak
OIDC_CLIENT_ID = 'gity-library'
OIDC_CLIENT_SECRET = '3YCdqXHgCMqeX5BTVmEvod6sdkjOCdxZ'
TOKEN_ENDPOINT = 'https://sso.gity.co.jp/realms/gity/protocol/openid-connect/token'
AUTHORIZATION_ENDPOINT = 'https://sso.gity.co.jp/realms/gity/protocol/openid-connect/auth'
JWKS_URI = 'https://sso.gity.co.jp/realms/gity/protocol/openid-connect/certs'

MEDIA_URL =  '/library/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'library/')
